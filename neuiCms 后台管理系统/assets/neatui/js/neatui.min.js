/**
* [NEATUI]
* 小巧UI前端框架
* Author:ChenMufeng
* Date: 2018.8.30
* Update:2020.08.24
*/

var neui = {
	/**
	* 显示转圈
	* @param str 转圈文字
	*/
	showAnimate:function(str){
		var txt = typeof(str)=='undefined' ? '' : (str=='' ? '' : str);
		var spanTxt = txt=='' ? '' : '<span class="txt">'+txt+'</span>';
		var _html='<div class="ne-loading">'+
					 '	<div class="ne-animate"><i class="icon icon-load"></i>'+spanTxt+'</div>'+ //edit 20180616-1
					 '</div>';
		if($('.ne-loading').length==0) $('body').append(_html);
	},
	
	/**
	* 销毁转圈
	*/
	destroyAnimate:function(){
		$('.ne-loading').remove();
	},


	/**生成随机字符串(数字+字母组成)*/
	generateRandChar:function(){
		var str = Math.random().toString(36).substr(2);
		return str;
	},
	
	/**生成遮罩节点*/
	generateMaskNode:function(){
		var str = 'ne_mask'; //请不要添加井号#或者点号.
		return str;
	},
	

	/**
	 * 检测是否手机端,如果是，返回true
	 */
	checkIsMobile:function(){ 
		var userAgentInfo = navigator.userAgent.toLowerCase();
		//console.log(userAgentInfo);
		var Agents = ["mobile","android","iphone","sysbian","windows phone","iPad","ipod","blackberry"];
		var flag = false;
		for(var i=0; i<Agents.length; i++){
			if(userAgentInfo.indexOf(Agents[i])>=0){
				flag = true;
				break;
			}
		}
		return flag;
	},


	/**
	 * 手机端禁止滚动
	 * touchemove中添加event.preventDefault()后会阻止浏览器默认的滚动
	 * @param {object} event 
	 */
	winScroll:function(event){ 
		event.preventDefault();
	},
	


	//=========================================
	/**
	* 创建遮罩
	* @param Id 遮罩ID
	*/
	openMask:function(Id){	
		var point = this.generateMaskNode();
		var node = typeof(Id)=='undefined' ? '#'+point : Id;
		var name = node.indexOf('#')>=0  ? node.replace('#','') : node;
		var _str = '<div class="'+point+'" id="'+name+'"></div>';
		if($(node).length==0) $('body').append(_str);
		var scrollHeight = document.body.scrollHeight; //整个网页高度(内容高度)
				//$(node).attr('style',"position:fixed;top:0;left:0;right:0;z-index:50;width:100%;height:100%;background-color:rgba(0,0,0,.35);background-color:#000;opacity:0.35;filter:Alpha(opcity=35);");
		//$('html,body').css({'height':scrollHeight,'overflow':'hidden'}); 
		$('html,body').attr('style','width:100%;height:'+scrollHeight+'px;overflow:hidden'); //禁止滚动(pc端)	 注意,若'height':'100%'则会闪屏
		if(this.checkIsMobile()){
			var dom = document.getElementById(node.toString().replace(/[\#\.]/g, ''));
			dom.addEventListener('touchmove', this.winScroll, {passive:false}); //禁止滚动（手机端,兼容chome手机模拟)
		}
		
		
		var zindex = 110, //遮罩基准z-index值(也可取css中的z-index值 110)
				count = $('.'+point).length, //遮罩数量统计
				m_zindex = zindex+ count; //当前遮罩z-index
		$('#'+name).css('z-index',m_zindex);
	},
	
	/**关闭遮罩*/
	closeMask:function(){
		var node = '#'+this.generateMaskNode();
		if($(node).length>0) $(node).fadeOut('fast').remove();
		$('html,body').removeAttr('style'); //解除禁止滚动(pc端)
		if(this.checkIsMobile()){
			$('html,body').off('touchmove,touchstart'); //解除禁止滚动(手机端)1//$(window).off('touchmove,touchstart');
			window.removeEventListener('touchmove', this.winScroll, {passive:false}); 	//解除禁止滚动(手机端)2(解除window绑定的touchmove事件)
		}
	},


	/**
	 * 打开iframe窗口
	 * @param {object} opt 参数对象
	 * edit 20200609-1
	 */
	openIframe:function(opt){
		var $this = this;
		var defaults = {
			
			url: '', // 链接地址
			caption: '', // 窗口标题(可选)
			top: '1%', // 窗口距离顶部的距离(可选)(数字或百分比，eg.25%), 默认1%
			width: '98%', // 窗口宽度(可选)(数字或百分比，eg1.1200, eg2.98%), 默认98%
			titleHeight: 35, // 标题栏高度(可选), 默认35
			titleFontSize:'', // 标题文字大小(可选), 默认18px
			showCross: true, // 是否显示右上角打叉图标(可选), 默认true
			crossDirection: 'right', // 打叉图标位置(可选). left 左上角, right 右上角(默认)
			buttons: [], // 操作按钮(可选). eg.['下一步', '取消']
			btnTheme: '', // 按钮主题(可选). 默认空. 其它值: back 返回主题
			btnBgColor: [], // 自定义按钮背景色(可选). 英文单词或颜色值. eg. ['#04BE02','#888']
			btnDirection: 'horizontal', // 按钮方向(可选).水平|horizontal(默认),垂直|vertical
			btnClickClose: false, // 是否一点击按钮就关闭窗口(可选),默认false. 值为true时用于无须校验数据等其它操作,此时须前台手动调用函数才会关闭窗口
			btnCallBack: function(ret){ // 按钮点击回调函数(可选). ret 为按钮索引值+1
				//this.closeFrame(); // 关闭本窗口(closeFrame是内置函数)
			},

			// 当IFRAME是直接内嵌在某个div区域中打开时,可使用以下参数
			element: '', // 指定拼接节点(可选), 默认空则拼接到body后面。值可以是元素选择器或jQ对象。eg. '#chart', '.graph'
			position: 'fixed', // 定位方式(可选), 默认fixed。值为relative并指定element参数时将以内嵌方式在某个div中打开
			mask: true, // 是否显示遮罩(可选), 默认true
			
			// 自定义其它参数(可选)
			params: {
				frameId: 'ne-frame-id-' + Math.random().toString(36).substr(2), // 嵌入的ID属性(可选)
				frameName: 'ne-frame-name', // 嵌入的Name属性(可选)
				frameZindex: 51, // 嵌入层级z-index(可选)
				frameRadius: true,  // 嵌入四个角是否圆角(可选),默认true
				frameBorder: true, // 嵌入是否有边框(可选),默认true
				maskId: 'ne-frame-mask', // 遮罩id(可选)
				maskZindex: 50, // 遮罩层级z-index(可选)
				animation:{ // 嵌入打开时是否启用动画效果(可选)
					enable: true, // 默认true开启(可选)
					direction: 'top' // 动画方向(可选). left 向左, top 向上(默认)
				}
			}, 
			closeCallBack: function(){}, //关闭时的回调函数(可选)
			closeFrame: function(){  //关闭窗口, 供btnCallBack等回调函数调用,用来关闭窗口(可选)
				closeMinyIframe();
			}
		}

		var settings = $.extend(true,{},defaults,opt||{});
		var $node = settings.element.toString().replace(/([ ]+)/g, '') === '' ? $('body') : (settings.element instanceof jQuery ? settings.element : $(settings.element));
			position = settings.position !== 'fixed' ? settings.position : 'fixed';
			showMask = settings.mask === false ? false : true;
		var ps_url = settings.url,
			ps_title = settings.caption,
			ps_cross = settings.showCross,
			ps_crossDirection = settings.crossDirection == '' ? ' right' : settings.crossDirection,
			ps_top = settings.top,
			ps_width = settings.width,
			ps_height = 100 - 2 * settings.top.replace(/[\%]/g,'') + '%',
			ps_titleH = parseInt(settings.titleHeight),
			ps_titleFontSize = settings.titleFontSize,
			ps_buttons = settings.buttons,
			ps_btnDirection = settings.btnDirection,
			ps_btnBgColor = settings.btnBgColor,
			ps_btnTheme = settings.btnTheme,
			ps_params = settings.params;
		// 
		if(ps_url != '' && typeof(ps_url) != 'undefined'){
			var winH = $(window).height();
			//var outerH = winH - ps_top.replace(/[\%]/g,'') / 100 *  winH- 55;
			//var outerH = winH * (ps_height.replace(/[\%]/g,'') / 100) - ps_titleH - 10,
			var outerH = winH * (ps_height.replace(/[\%]/g,'') / 100),
				title = typeof ps_title == 'undefined' ? '' : ps_title,
				tfontsize = typeof ps_titleFontSize == 'undefined' ? '' : ps_titleFontSize.toString().replace(/px/g, '') + 'px',
				showCross = typeof ps_cross == 'undefined' ? true : ps_cross == false ? false : true,
				btns = typeof ps_buttons == 'undefined' ? '' : ps_buttons,
				btnDirection = typeof ps_btnDirection == 'undefined' ? '' : ps_btnDirection,
				btnBgColor = typeof ps_btnBgColor == 'undefined' ? '' : ps_btnBgColor,
				top = ps_top,
				width = ps_width.indexOf('%') >= 0 ? ps_width : ps_width + 'px',
				left = right = (100 - width.replace(/[\%]/g,'')) / 2,
				height = ps_height,
				titleH = ps_titleH,
				params3 = typeof(ps_params)=='undefined' ? '' : ps_params; //第3个参数，遮罩参数（eg.遮罩id,层级z-index)
			var frameZindex = params3 =='' ? '' : params3.frameZindex,
				frameId = params3 == '' ? defaults.params.frameId : params3.frameId.toString().replace(/[\.\#]/g, ''),
				frameName = params3 == '' ? defaults.params.frameName : params3.frameName,
				frameBorder = params3 == '' ? true : params3.frameBorder === false ? false : true, //默认true
				frameRadius = params3 == '' ? true : params3.frameRadius === false ? false : true, //默认true
				maskId = params3 == '' ? '' : params3.maskId,
				maskZindex = params3 == '' ? '' : params3.maskZindex,
				animation = params3 == '' ? '' : params3.animation;
			var animateEnabled  = animation == '' ? false : animation.enable === true ? true : false,
				animateDirection = animation == '' ? 'left' : animation.direction;
			var parentNode = 'ne-frame-window';
			var _crossClassName = ' ' + ps_crossDirection;
			var _crossStr = !showCross ? '' : '<div class="iframe-close' + _crossClassName + '"><i class="icon icon-close"></i></div>';
			var _fontSizeStyle = tfontsize == '' ? '' : ' font-size:' + tfontsize;
			var _titleStr = title == '' ? '' : 	'<div class="iframe-title" style="height:' + titleH + 'px;line-height:' + titleH + 'px;' + _fontSizeStyle + '">' + title + '</div>';
			var _btnHtml = '';
			if(Object.prototype.toString.call(btns) == "[object Array]"){ //是数组时
				for(var i = 0; i < btns.length; i++){
					var j = i + 1;
					var _bgStyle = typeof btnBgColor[i] == 'undefined' || btnBgColor == null ? '' : ' style="background-color:' + btnBgColor[i] + '"';
					_btnHtml += '<button type="button" class="frame-btn frame-btn-' + j + '"' + _bgStyle + '>' + btns[i] + '</button>';
				}
			}
			var _btnStr = btns == '' ? '' : '<div class="iframe-operation ' + btnDirection + '">' + _btnHtml + '</div>';
			var _themeClass = ps_btnTheme == '' ? '' : ' theme-' + ps_btnTheme;
			var _topStr = _titleStr == '' && _btnStr == '' ? '' : '<div class="iframe-info' + _themeClass + '">' + _titleStr + _btnStr + '</div>';
			var _html = '<div id="' + parentNode + '" style="position:' + position + ';top:' + top + ';width:' + width + ';height:' + height + '">'+
									_crossStr +
									_topStr +
									'	<div class="iframe-content" style="height:' + outerH + 'px">'+
									'		<iframe class="ne-iframe" id="' + frameId + '" name="' + frameName + '" src="'+ps_url+'"></iframe>'+
									'	</div>'+
									'</div>';
			$node.append(_html).animate({}, function(){
				var $parentDom = $('#' + parentNode);
				if(showMask) createMinyMask(maskId,maskZindex);
				var infoH = $parentDom.find('.iframe-info').outerHeight(true);
				// console.log('outerH:', outerH, '\ninfoH:', infoH);
				$parentDom.find('.iframe-content').css({
					height: outerH - infoH
				})

				// BUG: ios中解决部分设备中iframe的宽、高被子页面内容撑开，导致子页面中fixed类型的元素无法固定在底部或左右两侧的问题
				if(/iphone|ipod|mac|ipad/i.test(navigator.userAgent.toLocaleLowerCase())){
					var frameLoaded = function(){
						$('#' + frameId).contents().find('html').css({
							position: 'relative',
						    width: '100%',
						    height: '100%',
						    overflow: 'hidden'
						})
						$('#' + frameId).contents().find('body').css({
							position: 'fixed',
						    top: 0,
						    left: 0,
						    width: '100%',
						    height: '100%',
							overflowY: 'auto',
							'-webkit-overflow-scrolling': 'touch'
							//border: '5px solid green',
						})

					}
					if(document.domain != ''){ // 在web目录中打开时
						//IFRAME加载完成时
						var domFrame = document.getElementById(frameId);
						if (domFrame.attachEvent){
							domFrame.attachEvent("onload", function(){
								frameLoaded();
							});
						} else {
							domFrame.onload = function(){
								frameLoaded();
							}
						}
					}
				}

				if(frameZindex!='') $parentDom.css('z-index',frameZindex); 
				if(!frameBorder) $parentDom.addClass('no-border');
				if(!frameRadius) $parentDom.addClass('no-radius');
				if(animateEnabled)  $parentDom.addClass('animation-' + animateDirection);
				/*//给iframe子页面添加关闭按钮
				var closeHtml = '<div class="iframe-close iframe-close-son"><i class="icon icon-close"></i></div>';
				var iframe = document.getElementById(frameId);
				if(iframe.attachEvent){
					iframe.attachEvent("onload", function(){
						$('#' + frameId).contents().find('body').prepend(closeHtml);
					})
				}else{
					iframe.onload = function(){
						$('#' + frameId).contents().find('body').prepend(closeHtml);
					}
				}*/
				//关闭iframe
				$(document).off('click', '.iframe-close').on('click','.iframe-close',function(){
					closeMinyIframe();
					if(settings.closeCallBack) settings.closeCallBack();
				})
				$(document).off('click', '.frame-btn').on('click', '.frame-btn', function(){
					if(settings.btnClickClose) closeMinyIframe();
					var index = $(this).index() + 1;
					if(settings.btnCallBack) settings.btnCallBack(index);
				})
			})
			
		}



		/*
		* 子函数：创建遮罩
		* @param ps_maskId 遮罩的id,eg. '#mask1'
		* @param ps_maskId 遮罩的z-index
		* edit 20200609-1
		*/
		function createMinyMask(ps_maskId, ps_maskZIndex){
			var node = typeof(ps_maskId)=='undefined' || ps_maskId=='' ? '#ne-frame-mask' : '#' + ps_maskId.toString().replace(/\#/g, '');
			var zindex = typeof(ps_maskZIndex)=='undefined' || ps_maskZIndex=='' ? 50 : ps_maskZIndex;
			var hideMaskId = node.toString().replace('#','').replace('.','');
			var _maskHideStr = '<input type="hidden" id="maskFlag" value="'+hideMaskId+'">';
			if($('#maskFlag').length==0) $('body').append(_maskHideStr);
			else $('#maskFlag').val(hideMaskId);	
			var id = node.indexOf('#')>=0  ? node.toString().replace('#','') : node;
			var _str = '<div id="'+id+'"></div>';
			//alert('len:'+$(node).length)
			if($(node).length==0) $('body').append(_str);
			var scrollHeight = document.body.scrollHeight; //整个网页高度(内容高度)
			$(node).attr('style',"position:fixed;top:0;left:0;right:0;z-index:"+zindex+";width:100%;height:100%;background-color:rgba(0,0,0,0.3);background-color:#000;opacity:0.3;filter:Alpha(opcity=30);filter:progid:DXImageTransform.Microsoft.Alpha(opacity=30);");
			//$('html,body').css({'height':scrollHeight,'overflow':'hidden'}); 
			$('html,body').attr('style','width:100%;height:'+scrollHeight+'px;overflow:hidden'); //禁止滚动(pc端)	 注意,若'height':'100%'则会闪屏
			if(checkMinyIsMobile()){
				var dom = document.getElementById(node.toString().replace(/[\#\.]/g, ''));
				dom.addEventListener('touchmove', this.winScroll, {passive:false}); //禁止滚动（手机端,兼容chome手机模拟)
			}
		}
		

		function checkMinyIsMobile(){ //子函数：检测是否手机端,如果是，返回true
			var userAgentInfo = navigator.userAgent.toLowerCase();
			//console.log(userAgentInfo);
			var Agents = ["mobile","android","iphone","sysbian","windows phone","iPad","ipod","blackberry"];
			var flag = false;
			for(var i=0; i<Agents.length; i++){
				if(userAgentInfo.indexOf(Agents[i])>=0){
					flag = true;
					break;
				}
			}
			return flag;
		}
		
		/**
		 * 子函数：关闭iframe窗口
		 */
		function closeMinyIframe(){
			var value = $('#maskFlag').val();
			var iframeId = value=='' ? '' : '#'+value;
			var node = '#ne-frame-window';
			$(node).fadeOut('fast','linear');
			var maskId = $('#maskFlag').val();
			$('#' + maskId).remove();
			$('html,body').removeAttr('style');
			setTimeout(function(){
				$(node).remove();
			},20)
		}
	},

	
	/**
	 * 打开侧栏
	 * @param {object} opt 参数对象
	 */
	openAside: function(opt){
		var self = this;
		var defaults = {
			caption: "", // 标题,可自定义HTML(可选)
			
			toper: "", //顶部,自定义HTML(可选).
			content: "", // 内容,可自定义HTML(可选)
			footer: "", //底部,自定义HTML(可选).

			//关闭按钮 
			cross: true, //是否显示关闭图标(可选),默认true
			showCrossText: false, //是否显关闭按钮的文字(可选),默认false
			showCrossIcon: true, //是否显示关闭按钮的图标(可选),默认true
			crossTextWord: '完成', //关闭按钮的文字(可选),默认'完成'

			//返回按钮
			back: false, //是否显示返回按钮(可选),默认false
			showBackText: false, //是否显示返回按钮的文字(可选),默认false
			backTextWord: '返回', //自定义返回按钮的文字(可选),默认'返回'
			showBackIcon: true, //是否显示返回按钮的图标(可选),默认true
		
			//标题栏
			capWrap: false, //标题是否单独一行(可选),默认false. 值为false时,标题将与顶部的关闭、返回按钮在同一行
			capThick: false, //标题文字是否加粗(可选),默认false.
			capLine: false, //标题栏是否添加下边线条好与内容部分分隔开(可选),默认false
			capShadow: false, //标题栏是否有阴影(可选),默认false
			capAlign: 'auto', //标题文字水平对齐方式(可选). 默认auto.其它值：left 左对齐, right 右对齐, center 居中对齐, auto 系统自动.
			capFontSize: 'auto', //标题文字大小(可选),默认auto. eg. 18或18px
			
			botLine: false, //底部栏是否添加上边线条好与内容部分隔开(可选),默认false.
			botShadow: false, //底部栏是否有阴影(可选),默认false

			adaptive: false, //窗口是否自适应内容大小(可选). true 是, false 否(默认)
			adapWidth: 'auto', //窗口自适应大小时的最大宽度(可选). 默认auto. (本参数仅在pc端时有效). 格式：数值或带px或带百分号的字符串, eg.200, '200px, '80%'
            frozen: true, //是否冻结顶部、中间及底部,即各部分是否使用绝对定位(可选). true 是(默认), false 否. false时控件大小自适应内容

			//按钮参数有两种格式
			buttons: [], // 按钮(可选). eg. buttons: ['取消', '确定'],
			/* buttons: [ // 按钮(可选)
				{text: "重置", name: "btn-reset", width: "100%", class: "ne-btn", backColor: "", foreColor: "", radius: "0"},
				{text: "完成", name: "btn-complete", width: "100%", class: "ne-btn info", backColor: "", foreColor: "", radius: "0"}
			], */
			buttonAutoWidth: false, //当只有一个按钮时按钮是否根据内容自动调整宽度(可选),默认false. 值为true时,buttons参数中设置的按钮宽度将不起作用
			buttonClingFoot: true, //按钮是否紧帖底部(可选),默认true. false时按钮与底部将有一定的距离
			showButton: true, //是否显示按钮(可选),默认true
			
			offset: { //位置偏移,由此可设置窗口位置(可选)
				left: 40,
				right: 0,
				top: 0,
				bottom: 0
			},
			radius: 0, //圆角边框值(可选)
			zIndex: 3, //层级z-index(可选)
			animate: { //动画(可选)
				enable: true, //是否启用
				direction: 'left' //动画方向(可选). left 向左(默认), right 向右, top 向上, bottom 向下
			},
			noneSelfClickClose: true, //是否点击窗口以外区域就关闭窗口(可选),默认true. 值为false时常用于多个侧栏嵌套时,除第1个侧栏外其它侧栏要求点击非窗口区域就关闭窗口
			btnClickClose: false, //是否一点击按钮就关闭窗口(可选),默认false. 值为true时用于无须校验数据等其它操作,此时须前台手动调用函数才会关闭窗口
			//回调
			crossCallBack: function(e){ }, // 打叉关闭图标回调(可选). e格式: {eleRoot:"根节点", eleLay:"layer节点", eleMain:"中间主体节点", eleTop:"顶部节点", eleFoot:"底部节点"}
			backCallBack: function(e){ }, // 返回按钮回调(可选). e格式: {eleRoot:"根节点", eleLay:"layer节点", eleMain:"中间主体节点", eleTop:"顶部节点", eleFoot:"底部节点"}
			openCallBack: function(e){ }, //创建完成后的回调. e格式: {eleRoot:"根节点", eleLay:"layer节点", eleMain:"中间主体节点", eleTop:"顶部节点", eleFoot:"底部节点"}
			btnCallBack: function(ret, e){ }, //按钮回调(可选). ret 按钮索引值+1, e 同openCallBack()的e参数
			//前台调用
			closeAside: function(){ //关闭当前窗口, 供btnCallBack等回调函数调用,用来关闭窗口(可选)
				shutSide();
			},
			closeAll: function(){ //关闭所有窗口, 供btnCallBack等回调函数调用,用来关闭窗口(可选)
				shutAll();
			}
		}
		var settings = $.extend(true, {}, defaults, opt || {});

		var zIndex = settings.zIndex,
			animate = settings.animate,
			offset = settings.offset,
			radius = settings.radius,
			cross = settings.cross,
			back = settings.back,
			showBackText = settings.showBackText,
			showBackIcon = settings.showBackIcon,
			showCrossText = settings.showCrossText,
			showCrossIcon = settings.showCrossIcon,
			adaptive = settings.adaptive,
			adapWidth = settings.adapWidth,
			frozen = settings.frozen;
		var anEnable = animate.enable,
			anDirection = ' cartoon-' + animate.direction,
			offLeft = offset.left,
			offRight = offset.right,
			offTop = offset.top,
			offBottom = offset.bottom;
		
		// 多个侧栏嵌套时：z-index自动增加
		var aZindex = parseInt(zIndex); //默认z-index为3
		if($('.ne-aside').length != 0){
			var basicZindex = parseInt($('.ne-aside').css('zIndex'));
			aZindex = aZindex < basicZindex ? basicZindex + 3 : aZindex;
		}
		var laZindex = aZindex - 1;
			mZindex =  aZindex - 2;
		var _aZindexStr = _laZindexStr = _mZindexStr = '';
		if(aZindex != 3){ //不是默认的z-index值3时
			_aZindexStr = ' z-index:' + aZindex + ';';
			_laZindexStr = ' z-index:' + laZindex + ';';
			_mZindexStr = ' z-index:' + mZindex + ';';
		}

		// 样式
		var _offLeftStr = offLeft == '' || offLeft == 0 ? '' : ' left: ' + offLeft + 'px;',
			_offRightStr = offRight == '' || offRight == 0 ? '' : ' right: ' + offRight + 'px;',
			_offTopStr = offTop == '' || offTop == 0 ? '' : ' top: ' + offTop + 'px;',
			_offBottomStr = offBottom == '' || offBottom == 0 ? '' : ' bottom: ' + offBottom + 'px;';
			_layRadiusStr = radius == '' || radius == 0 ? '' : ' border-radius:' + radius + 'px;';

		var _sideStyle = ' style="' + _aZindexStr + '"';
		var _maskStyle = ' style="' + _mZindexStr + '"';
		var _layStyle = ' style="' + _offLeftStr + _offRightStr + _offTopStr + _offBottomStr + _layRadiusStr + _laZindexStr + '"';
		var _footClassName = _layRadiusStr == '' && !adaptive ? '' : ' has-padding';
		var _layClassName = _layRadiusStr == '' && !adaptive ? '' : ' has-radius';
			_layClassName += frozen ? '' : ' unfreeze';

		// 创建浮层
		var topHtml = settings.toper;
		var captionHtml = settings.caption,
			captionClass = settings.capWrap ? '' : ( settings.caption == '' ? ' has-cap-nowrap-empty' : ' has-cap-nowrap');
			captionClass += back ? '' : ' has-cap-noback',
			captionClass += cross ? '' : ' has-cap-nocross',
			captionClass += showBackText ? '' : ' has-cap-nobacktext',
			captionClass += settings.capThick ? '' : ' has-cap-nothick';
			captionClass += !settings.capLine ? '' : ' has-cap-botline';
			captionClass += !settings.capShadow ? '' : ' has-cap-shadow';
			captionClass += topHtml == '' ? '' : ' has-head-custom';
			captionClass += settings.capAlign == '' || settings.capAlign == 'auto' ? '' : ' has-cap-align-' + settings.capAlign;
			captionStyle = settings.capFontSize == '' || settings.capFontSize == 'auto' ? '' : ' style="font-size:' + settings.capFontSize.toString().replace(/px/g, '') + 'px"';
		var contentHtml = settings.content,
			btnHtml = '',
			footHtml = settings.footer,
			backHtml = !showBackText ? '' : '<span>' + settings.backTextWord + '</span>',
			backIconStr = !showBackIcon ? '' : '<i></i>';
			crossHtml = !showCrossText ? '' : '<span>' + settings.crossTextWord + '</span>';
			crossIconStr = !showCrossIcon ? '' : '<i></i>';
		_footClassName = !settings.botLine ? '' : ' has-foot-line';
		_footClassName += !settings.botShadow ? '' : ' has-foot-shadow';
		_footClassName += footHtml == '' ? '' : ' has-foot-custom';
		var _btnClassName = settings.buttonClingFoot ? '' : ' has-btn-nocling';
		var btnLen = settings.buttons.length;
		if(settings.showButton){
			for(var i = 0; i < btnLen; i++){
				var len = settings.buttons.length;
				var row = settings.buttons[i];
				if(typeof row == 'string'){
					var _className = '';
					if(btnLen == 1) _className = ' blue';
					if(i >= 1) _className = ' blue';
					if(i >= 2) _className = ' green';
					btnHtml += '<button type="button" class="ne-btn no-radius' + _className + '">' + row + '</button>';
				}
				if(typeof row == 'object'){
					var btnText = row["text"],
						btnName = typeof row["name"] == 'undefined' ? '' : row["name"],
						btnWidth = typeof row["width"] == 'undefined' ? '100%' : (row["width"] == '' ? '100%' : row["width"]),
						btnClass = typeof row["class"] == 'undefined' ? '' : row["class"],
						btnBackColor = typeof row["backColor"] == 'undefined' ? '' : row["backColor"],
						btnForeColor = typeof row["foreColor"] == 'undefined' ? '' : row["foreColor"],
						btnRadius = typeof row["radius"] == 'undefined' ? '' : row["radius"];
					var _idStr = btnName == '' ? '' : ' id="' + btnName + '"';	
						_classStr = btnClass == '' ? ' class="ne-btn"' : ' class="' + btnClass + '"';
					var _widthStr = btnWidth == '' ? '' : ' width:' + btnWidth + ';',
						_backColorStr = btnBackColor == '' ? '' : ' background-color: ' + btnBackColor + ';',
						_foreColorStr = btnForeColor == '' ? '' : ' color:' + btnForeColor + ';',
						_btnRadiusStr = btnRadius == '' ? '' : ' border-radius:' + btnRadius + 'px;';
					var _styleStr = ' style="' + _widthStr + _backColorStr + _foreColorStr + _btnRadiusStr + '"';
					btnHtml += '<button type="button"' + _idStr + _classStr + _styleStr + '>' + btnText + '</button>';
				}
			}
		}
		var isShowHeader = (captionHtml == '' && !back && !cross) ? false : true,
			isShowFooter = (footHtml == '' && (btnLen == 0 || !settings.showButton) ) ? false : true;
		var rootId = 'ne-aside-' + Math.random().toString(36).substr(2); //根节点ID.生成字母数字的随机字符
		// HTML
		var allHtml = [
			'<div class="ne-aside" id="' + rootId + '"' + _sideStyle + '>',
				'<i class="aside-mask"' + _maskStyle + '></i>',
				'<div class="aside-layer' + anDirection + _layClassName + '"' + _layStyle + '>',
					!isShowHeader ? '' : 
					[
						'<div class="as-lay-header' + captionClass + '">',
							'<div class="lay-header-top">',
								!back ? '' : '<div class="header-top-back">' + backIconStr + backHtml + '</div>',
								settings.capWrap ? '' : (captionHtml == '' ? '' : '<div class="header-top-caption"' + captionStyle + '>' + captionHtml + '</div>'),
								!cross ? '' : '<div class="header-top-cross">' + crossHtml + crossIconStr + '</div>',
							'</div>',
							!settings.capWrap ? '' : (captionHtml == '' ? '' : '<div class="lay-header-caption"' + captionStyle + '>' + captionHtml + '</div>'),
							(topHtml == '' ? '' : '<div class="lay-header-custom">' + topHtml + '</div>'),
						'</div>'
					].join('\r\n'),
					'<div class="as-lay-main">',
						contentHtml,
					'</div>',
					!isShowFooter ? '' : 
					[
						'<div class="as-lay-footer' + _footClassName + '">',
							(footHtml == '' ?  '' : '<div class="lay-footer-custom">' + footHtml + '</div>'),
							(btnHtml == '' ? '' : '<div class="lay-footer-button' + _btnClassName + '">' + btnHtml + '</div>'),
						'</div>'
					].join('\r\n'),
				'</div>',
			'</div>'
		].join('\r\n');
		

		// 拼接并初始化
		var eleRoot = null; //根节点选择器. 全局变量
		var selectorObj = { } //控件各个节点选择器组成的对象
		$(allHtml).appendTo('body').animate({}, function(e){
			eleRoot = $('#' + rootId); //全局赋值
			var elAside = this.id == '' ? $('.' + this.className) : $('#' + this.id);
			elAside.addClass('active'); // 回调加动画
			self.preventLayerPutWinRoll(elAside, '.as-lay-main'); // 阻止窗体随浮层滚动. 不要用$(eleRoot).find('.as-lay-main'),否则移动端实测内部无法滚动
			//子元素高度不能为100%，否则移动端实测时内部将无法滚动，故这里要强制子元素高度为auto
			$(eleRoot).find('.as-lay-main').children().css({ 
				'height': 'auto'
				//'overflowY':'auto', 
				//'-webkit-overflow-scrolling':'touch'
			})
			
			selectorObj = { 
				eleRoot: $(eleRoot).find('.ne-aside'), 
				eleLay: $(eleRoot).find('.aside-layer'), 
				eleMain: $(eleRoot).find('.as-lay-main'), 
				eleTop: $(eleRoot).find('.as-lay-header'), 
				eleFoot: $(eleRoot).find('.as-lay-footer') 
			}
			// if(settings.openCallBack) settings.openCallBack( selectorObj ); // 1.放前面
			if(adaptive){ //自适应内容
				var winW = $(window).width();
				var winH = $(window).height();
				var eleH = 0;
				$(eleRoot).find('.aside-layer').children().each(function(k){
					eleH += $(this).outerHeight(true);
				})


				// Bug解决2：安卓时软键盘弹出导致背景色透明，输入框错位 edit 20210514-1
				var pixel = parseFloat(( winH - eleH ) / 2 );
				var topPct = 1/2; // 顶部占比. eg. 1/3
				var botPct = 1 + (1 - topPct); // 底部占比. eg. 1+2/3 = 5/3
				var toper = topPct * pixel;
				var bottom = botPct * pixel;
				$(eleRoot).find('.aside-layer').css({
					// position: 'fixed',
					left: '5%',
					right: '5%',
					top: toper + 'px',
					bottom: bottom + 'px',
					borderRadius: '4px'
				})


				// 按钮自动调整宽度
				if(!self.checkIsMobile()){ // pc端时
					var left = 0;
					if(adapWidth !== '' && adapWidth != 'auto'){
						var _w = adapWidth.toString().replace(/[px|%]/g, '');
						// _w = isNaN(Math.floor(_w)) ? 400 : Math.floor(_w);
						var _numW = isNaN(Math.floor(_w)) ? 400 : Math.floor(_w);
						if(_numW > winW) _numW = winW / 3;
						var _perW = Math.floor(_w) > 100 ? 50 :  Math.floor(_w);
						left = adapWidth.toString().indexOf('%') >= 0 ?  ((100 - _perW)/2 + '%') :  (winW - _numW)/2;
					}else{
						left = (winW - 400)/2; // 默认宽400
					}
					$(eleRoot).find('.aside-layer').css({
						'left' : left,
						'right': left
					})
				}


				// Bug解决2：安卓时软键盘弹出导致背景色透明，输入框错位 add 20210514-1
				//————————————————START 安卓设备时————————————————
				var isBeCalled = false; // 软件盘是否已被调起过,默认false add 20210824-1
				var ua = navigator.userAgent.toLocaleLowerCase();
				var isAndroid = ua.indexOf('android') > -1 || ua.indexOf('adr') > -1 ? true : false;
				if(!isBeCalled && isAndroid){
					var mainH = $(eleRoot).find('.as-lay-main')[0].offsetHeight;
				    var distanceTop = $(eleRoot).find('.as-lay-main').offset().top;
					if(animate.direction == 'top') distanceTop -= $(eleRoot).find('.aside-layer').outerHeight(true); // 如果动画方向是向上，必须减去控件自身高度，否则因为css有设置transform: translateY(100%)会导致输入框聚焦时定位出现问题。
				    var scrollTop =  document.body.scrollTop || document.documentElement.scrollTop;
				    var offsetTop = distanceTop - scrollTop;
				    var offsetBot = winH - offsetTop - mainH;
				    // alert('视窗口距离：' + winH + '\n顶部距离：' + distanceTop + '\n滚动距离：' + scrollTop + '\n相对顶部距离：' + offsetTop + '\n自身距离：' + mainH + '\n底部距离：' + offsetBot);
				    var softboardH = 0; // 软键盘高
				 	var innerHeight = window.innerHeight;
					window.addEventListener('resize', function(){
					    var newInnerHeight = window.innerHeight;
					    if (innerHeight > newInnerHeight) { // 键盘弹出事件处理
							isBeCalled = true; // 软件盘被调起了. add 20210824-1
						    softboardH = innerHeight - newInnerHeight; // 软键盘高
						     if(softboardH >= offsetBot){ // 软键盘遮住了可视区
							    $(eleRoot).find('.aside-layer').css({
							    	bottom: (0 - softboardH) + 'px' // 重置底部定位
							    })
								$(eleRoot).find('.as-lay-main').css({
							      	height: (mainH - (softboardH - offsetBot)) + 'px' // 重置内容区域高度(css中要设置有y轴滚动)
							    })
							  	// 当前焦点元素出现在可视区域内
							    var curElement = document.activeElement;
							    var tagname = curElement.tagName.toLocaleLowerCase();
							    if(tagname == 'input' || tagname == 'textarea' || (tagname == 'div' && curElement.getAttribute('contenteditable') == 'true')){
							    	curElement.scrollIntoView(false);
							    }
							}else{ // 软键盘离可视区还有一定距离
								$(eleRoot).find('.aside-layer').css({
							    	bottom: (bottom　- softboardH) + 'px' // 重置底部定位
							    })
							}

		
					    } else { // 键盘收起事件处理

					      	$(eleRoot).find('.aside-layer').css({
						    	bottom: bottom + 'px' // 还原底部定位
					    	})
					    	$(eleRoot).find('.as-lay-main').css({
						      	height: mainH + 'px' // 还原内容区域高度
						    })

					    }
					})
				}
				//————————————————END 安卓设备时————————————————
				

			}

			// 外观调整
			var headH = Math.ceil(parseFloat($(eleRoot).find('.as-lay-header').outerHeight(true))),
				headTop = Math.ceil(parseFloat($(eleRoot).find('.as-lay-header').css('top').toString().replace(/px/g, '')));
			var topH = headH + headTop,
				botH = $(eleRoot).find('.as-lay-footer').outerHeight(true);
			if(topH != 0) topH += topH == null ? 15 : 0;
			if(botH != 0) botH += botH == null ? 15 : 10;
			$(eleRoot).find('.as-lay-main').css({
				top: topH + 'px',
				bottom: botH + 'px'
			})
			if(settings.openCallBack) settings.openCallBack( selectorObj ); // 2.放后面

			// 按钮自动调整宽度
			if(settings.buttonAutoWidth && btnLen == 1){
				var btMR = ''; // margin-right
				var maxW = 0;
				var minMR = 0;
				var contPad = 0;
				$(eleRoot).find('.as-lay-main').find('input:text, textarea').each(function(){
					var eleERow = $(this).parents('.eform-row'),
						eleEItem = $(this).parent(),
						eleECell = eleEItem.next().length == 0 ? null : eleEItem.next();
					var isEformRow = eleERow.length > 0 ? true : false;
					var w1 = Math.floor($(this).outerWidth(true));
					var w2 = '';
					if(isEformRow){
						contPad = Math.floor(eleERow.parent().css('paddingRight').toString().replace(/px/g, ''));
						var cellPosition  = eleECell == null ? '' : eleECell.css('position');
						var nextW = eleECell == null ? 0 : eleECell.outerWidth(true) + Math.floor(eleECell.css('marginLeft').toString().replace(/px/g, ''));
						btMR = cellPosition != 'fixed' && cellPosition != 'absolute' ? nextW : 0;
						var rowW = eleERow.outerWidth(true),
							textW = eleEItem.prev().length == 0 ? 0 : eleEItem.prev().outerWidth(true),
							mlW = Math.floor(eleEItem.css('marginLeft').toString().replace(/px/g, '')),
							mrW = Math.floor(eleEItem.css('marginRight').toString().replace(/px/g, ''));
						var w2 = rowW - textW - mlW - mrW;
					}
					// console.log('cellPosition:', cellPosition, '-nextW：', nextW, '-w1：', w1, '-w2：', w2);
					var w = w2 == '' ? w1 : w2;
					maxW = maxW < w ? w : maxW;
					minMR = minMR > btMR ? btMR : minMR;
				})
				minMR += contPad + 4;
				// console.log('btMR:', btMR, '- contPad：', contPad)
				$(eleRoot).find('.lay-footer-button').addClass('has-btn-align-right').find('button:button').css({
					width: maxW + 'px',
					'margin-right' : minMR + 'px'
				})
			}
			
			// 按钮回调
			$(eleRoot).find('.as-lay-footer button').on('click', function(){ //点击按钮
				if(settings.btnClickClose) shutSide($(this));
				var index = $(this).index() + 1;
				var callback = selectorObj["eleBtn"] = $(this);
				if(settings.btnCallBack) settings.btnCallBack(index, selectorObj );
			})
			// 遮罩回调
			$(eleRoot).find('.aside-mask').on('click', function(){
				if(settings.noneSelfClickClose) shutSide($(this));
			})
			// 关闭按钮、返回按钮回调
			$(eleRoot).find('.header-top-back, .header-top-cross').on('click', function(){
				shutSide($(this));
				if($(this)[0].className.indexOf('cross') >= 0)
					if(settings.btnCallBack) settings.crossCallBack(selectorObj);
				if($(this)[0].className.indexOf('back') >= 0)
					if(settings.btnCallBack) settings.backCallBack(selectorObj);
			})

			// --------------------------------------------------------------------------------
			//  				BUG: ios 苹果系列产品设备问题解决
			//			bug: 解决“fixed弹层点击输入框无法输入文字(无法聚焦)”的bug add 20210407-1
			// --------------------------------------------------------------------------------
			// 总结：
			// click,focus事件虽然可使输入框正常输入文字,但聚焦时输入框会被遮挡住;
			// blur事件刚好可使输入框正常输入文字,且聚焦时输入框不会被遮挡柱
			var textboxNode = '#' + rootId;
			var elements = (textboxNode + ' textarea:not([readonly]):not([disabled])') + ',' + (textboxNode + ' input:text:not([readonly]):not([disabled])') + ',' + (textboxNode + ' div[contenteditable=true]');
			$(document).off('blur', elements).on('blur', elements, function(){ //事件: focus, click, blur
				var target = this;
				//if(/iphone|ipod|mac|ipad/i.test(navigator.userAgent.toLocaleLowerCase())){ // 仅对苹果设备起作用
					if(!isBeCalled){ // 只有当软件盘没被调起过才执行 edit 20210824-1
						// 方法1：使用scrollTo
						// var scrollTop = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop;
						// //window.scrollTo(0, scrollTop);
						// window.scrollTo({
						// 	left: 0, //x轴
						// 	top: scrollTop, //y轴
						// 	behavior: 'smooth'
						// })
						// 方法2：使用scrollIntoView
						target.scrollIntoView(true); //滚动target元素的父容器，使被调用的元素对用户可见
					}
				//}
			})

			
		})

		

		
		// 关闭当前窗口
		function shutSide(ps_obj){
			var ele = typeof ps_obj == 'undefined' ? 
						eleRoot
						: 
						( ps_obj instanceof jQuery ? ps_obj : $(ps_obj) ).parents('.ne-aside');
			ele.remove();
			if($('.ne-aside').length == 0) self.letWinRoll(); // 让窗体可自由滚动
		}
		// 关闭所有窗口
		function shutAll(){
			$('.ne-aside').remove();
			self.letWinRoll(); // 让窗体可自由滚动
		}
	},



	/**
	 * 异步请求数据后执行异步操作
	 * 即：封装了常见异步取数(promise, jq Deferred等)后的几种操作方式
	 * @param {object} ps_opts 参数
	 */
	doneAsyncEvent: function(ps_opts){
		var defaults = {
			getData: null,
			callBack: null
		}
		var settings = $.extend(true, {}, defaults, ps_opts || {});
		if(settings.getData){
			var result = settings.getData();
			if(typeof result == 'undefined'){
				alert('前台写法错误，请检查获取数据的函数是否有返回值！');
			}
			if(result instanceof Promise){ // Promise对象(异步取数)
				result.then(function(res){
					settings.callBack( {source: res} );
				}).catch(function(err){
					alert(err);
				})
			}
			else if(typeof result.promise != 'undefined'){ // JQ Deferred对象(异步取数)
				$.when(result).done(function(res){
					settings.callBack( {source: res} );
				}).fail(function(err){
					alert('ERROR，出错啦');
				})
			}
			else{ // 普通对象(同步取数)
				settings.callBack( {source: result} );
			}
		}
	},




	//========================================
	/**
	* 不再阻止“windows窗体滚动”(让窗体可自由滚动)
	*/
	letWinRoll: function(){
		$('html').removeClass('ne-noscroll');
	},

	/**
	 * 阻止“浮层滚动时windows窗体也随之滚动”(阻止窗体随浮层滚动)
	 * 即：web移动端浮层滚动时阻止window窗体滚动
	 * 用于解决：ios弹出层或遮罩滚动穿透问题
	 * 兼容说明：fixed 弹出层手在遮罩或弹出层内容中尝试进行滚动时，发现windows窗体也会跟随滚动
	 * @param {object | element} container 表示委托的浮层容器元素（$包装器对象），或者页面其他比较祖先的元素. eg. $('.layer')
		但是，非常不建议使用$(document)或者$(document.body)等对象作为委托容器，因为可能会出现类似下面这样的错误提示：Unable to preventDefault inside passive event listener due to target being treated as passive.
	* @param {string | selector} selectorScrollable 表示container中可以滚动的元素的选择器(不需要用$包装器对象)，表示真正的滚动的主体。 eg. '.scrollable'
	* 参考：https://www.zhangxinxu.com/wordpress/2016/12/web-mobile-scroll-prevent-window-js-css/
	*/
	preventLayerPutWinRoll: function(container, selectorScrollable){
		//CSS部分
		$('html').addClass('ne-noscroll');
		// ·JS部分
		// 如果没有滚动容器选择器，或者已经绑定了滚动时间，忽略
		if (!selectorScrollable || container.data('isBindScroll')) {
			return;
		}
		// 是否是搓浏览器
		// 自己在这里添加判断和筛选
		var isSBBrowser;
		var data = {
			posY: 0,
			maxscroll: 0
		};
		// 事件处理
		container.on({
			touchstart: function (event) {
				//var events = event.touches[0] || event; //JQ 3.0+
				var events = event.originalEvent.targetTouches[0] || event; //JQ 2.0-
				// 先求得是不是滚动元素或者滚动元素的子元素
				var elTarget = $(event.target);
				if (!elTarget.length) {
					return;
				}
				var elScroll;
				// 获取标记的滚动元素，自身或子元素皆可
				if (elTarget.is(selectorScrollable)) {
					elScroll = elTarget;
				} else if ((elScroll = elTarget.parents(selectorScrollable)).length == 0) {
					elScroll = null;
				}
				if (!elScroll) {
					return;
				}		
				data.elScroll = elScroll; // 当前滚动元素标记
				data.posY = events.pageY; // 垂直位置标记
				data.scrollY = elScroll.scrollTop();
				data.maxscroll = elScroll[0].scrollHeight - elScroll[0].clientHeight; // 是否可以滚动
			},
			touchmove: function (event) {
				// 如果不足于滚动，则禁止触发整个窗体元素的滚动
				if (data.maxscroll <= 0 || isSBBrowser) {
					event.preventDefault(); // 禁止滚动
				}
				var elScroll = data.elScroll; // 滚动元素
				var scrollTop = elScroll.scrollTop(); // 当前的滚动高度

				// 现在移动的垂直位置，用来判断是往上移动还是往下
				//var events = event.touches[0] || event; //JQ 3.0+
				var events = event.originalEvent.targetTouches[0] || event; //JQ 2.0-
				// 移动距离
				var distanceY = events.pageY - data.posY;
				if (isSBBrowser) {
					elScroll.scrollTop(data.scrollY - distanceY);
					elScroll.trigger('scroll');
					return;
				}
				// 上下边缘检测
				if (distanceY > 0 && scrollTop == 0) { // 上边缘检测，往上滑，并且到头
					event.preventDefault(); // 禁止滚动的默认行为
					return;
				}
				if (distanceY < 0 && (scrollTop + 1 >= data.maxscroll)) { // 下边缘检测，往下滑，并且到头
					event.preventDefault(); // 禁止滚动的默认行为
					return;
				}
			},
			touchend: function () {
				data.maxscroll = 0;
			}
		})
		container.data('isBindScroll', true); // 防止多次重复绑定
	},




	//========================================
	/**
	 * 导出excel功能
	 * 将数据导出excel
	*/
	export2Excel:function(opt){
		var defaults = {
			enable: true, //是否启用(可选).默认true
			filename:'导出报表-', //文件名（可选）.系统默认的excel文件名为：'Excel Document Nam
			fileAutoTime:true, //导出的文件自动添加时间(hh:mm:ss)作为文件名的一部分。默认true
			extension: '.xls' //拓展名。 .xls(excel 2003)(默认), .xlsx (excel 2007,2010)
		}
		var settings = $.extend(true,defaults,opt||{});
		var tableRootNode = '.ne-table';
		if($(tableRootNode).length==0){
			this.alertDialog('表格根节点 '+tableRootNode+' 不存在，请检查');
			return;
		}
		if(!settings.enable){
			this.alertDialog('您已禁用导出EXCEL功能，请先启用');
			return;
		}	
		if(navigator.appName == "Microsoft Internet Explorer" && parseInt(navigator.appVersion.split(";")[1].replace(/[ ]/g, "").replace("MSIE",""))<11){
			this.alertDialog('导出EXCEL功能暂不支持IE11以下版本的浏览器\n请使用360(极速模式)、火狐（Firefox）、谷歌（Chrome）等高级浏览器！');
			return;
		}
		var flag = false;
		if(typeof($('.btn-excel').table2excel)=='function') flag = true;
		
		if(!flag){
			this.alertDialog('请引入jquery.table2excel.min.js才能使用导出功能');
		}else{
			var mydate = new Date(),
					year = mydate.getFullYear(),
					month = mydate.getMonth()+1;
					day = mydate.getDate(),
					hour = mydate.getHours(),
					minute = mydate.getMinutes(),
					seconds = mydate.getSeconds();
			if(month<10) month = '0'+month;
			if(day<10) day = '0'+day;
			if(hour<10) hour = '0'+hour;
			if(minute<10) minute = '0'+minute;
			if(seconds<10) seconds = '0'+seconds;
			var today = year+''+month+''+day+''+hour+''+minute+''+seconds;
			
			var $filename = typeof settings.filename == 'undefined' ? '导出报表-' : (settings.filename == '' ? '导出报表-' : settings.filename),
					$fileAutoTime = typeof settings.fileAutoTime == 'undefined' ? true : settings.fileAutoTime,
					$fileext = typeof settings.extension == 'undefined' ? '.xls' : (settings.extension =='' ? '.xls' : settings.extension);
			if($fileAutoTime) $filename += today;
			
			var $fileext = ".xls"; //导出的excel文件拓展名
			if(navigator.userAgent.toLocaleLowerCase().indexOf('firefox')>-1){ //火狐浏览器时要带后缀
				$filename = $filename + $fileext;
			}
			
			$(tableRootNode).table2excel({
				exclude: ".noExl", //不要导出的行
				name: "Excel Document Name", //导出的excel文档名称,默认Excel Document Name
				filename: $filename, //excel文件名
				fileext: $fileext, //文件后辍名
				exclude_img: true, //是否排除导出图片 (exclude 表示不包括)
				exclude_links: true, //是否排除导出超链接 (exclude 表示不包括)
				exclude_inputs: true //是否排除导出输入框中的内容 (exclude 表示不包括)
			})
			
		}
	},



	//========================================
	/**
	* 弹出窗口提示信息
	*/
	alertDialog:function(tips){
		if(typeof neuiDialog!='undefined'){
			neuiDialog.alert({
				caption: '提示',
				message: tips,
				buttons: ['确定']
			})
		}else{
			alert(tips);
		}
	},


	//========================================
	/**
	 * 使用canvas导出图片功能
	 * 将网页导出成图片，即利用canvas将整个网页或局部区域导出成图片
	 * @param {object} options 参数(可选)。格式：{element: "要转换成图片的选择器节点(可选), 默认'body'", filename: "下载后的图片名称(仅pc端时有效)(可选)", caption: "弹出窗口的标题(仅移动端时有效)(可选)"}
	 * [兼容]：chrome 14.0+, ie 13.0+, firefox 20.0+,opera 15.0+, safari 10.+
	 * [Bug]：导出节点内如果使用到了本地图片作为背景图片，将会使画布受到污染从而无法导出，此时会报错“Uncaught DOMException: Failed to execute 'toDataURL' on 'HTMLCanvasElement': Tainted canvases may not be exported”。解决办法是：把本地图片转换成base64图片即可！
	 * [注意]：需引入jquery.html2canvas.min.js
	 * [参考]: http://html2canvas.hertzen.com/
	 	http://caibaojian.com/h5-download.html
	 	https://www.cnblogs.com/xieyongbin/p/10921913.html
	 */
	exportWeb2Image: function(options){
		var _this = this;
		var defaults = {
			element: "body", // 要转换成图片的选择器节点(可选), 默认'body'。若是整个网页，传值：'body', 若是部分区域，则传值：'#节点ID。 eg1. 'body', eg2.'#users'
			filename: "下载图片.png", // 下载后的图片名称(仅pc端时有效)(可选)。
			caption: "长按图片“保存到手机”", // 弹出窗口的标题(仅移动端时有效)(可选)。
			closeCallBack: null // 窗口关闭时的回调函数(可选)。
		};
		var settings = $.extend(true, {}, defaults, options || {});
		var element = settings.element, 
			filename = settings.filename, 
			caption = settings.caption;
		if(!/\.(jpg|jpeg|jpg|png)/g.test(filename)) filename += '.png'; //图片没有后辍时,默认为png图片
		if(caption.toString().replace(/([ ]+)/g, '') === '') caption = defaults.caption;
		// 判断是否引入html2canvas
		if(typeof html2canvas === 'undefined'){
			this.alertDialog('请引入jquery.html2canvas.min.js');
			return;
		}
		// 判断参数是否异常
		if(element != 'body' && ( document.getElementById(element.toString().replace(/([\.\#])/g, '')) === null  && document.getElementsByClassName(element.toString().replace(/([\.\#])/g, ''))[0] === null) ){
			this.alertDialog('节点不存在，请检查：' + element);
			return;
		}
		//
		html2canvas(document.querySelector(element)).then(function(canvas){
			// 拿到canvas DOM元素
			// document.body.appendChild(canvas);
			var imgUri = canvas.toDataURL("image/png").replace("image/png", "image/octet-stream"); // 得到图片的base64编码数据
			// console.log('图片URL：', imgUri);
			// 下载图片
			// ①.pc端：chrome、firefox可直接下载
			if(!_this.checkIsMobile()){
				var pic = document.createElement('a');
				pic.setAttribute('id', 'picture1');
				pic.setAttribute('href', imgUri); // 给a标签的href属性赋值为图片地址
				pic.setAttribute('download', filename); // 给a标签添加download属性, 该属性值即为图片名称, 如a.png
				document.body.appendChild(pic); // 动态创建a标签节点
				pic.click(); // 触发a标签的click事件
			}
			// ②.移动端：添加一个弹层，展示图片，提示用户长按。
			else{
				var _conHtml = [
					'<div class="ne-web2Image">',
						// '<div class="web2Image__text"><span>' + caption + '</span></div>',
						'<div class="web2Image__img"><img src="' + imgUri + '"></div>',
					'</div>'
				].join('\r\n');
				_this.openAside({
					caption: caption,
					content: _conHtml,
					cross: true, 
					offset: {
						left: 20,
						right: 20,
						top: 20,
						bottom: 20
					},
					radius: 4, 
					zIndex: 4, 
					animate: {
						enable: true, //是否启用
						direction: 'bottom' //动画方向(可选). left 向左(默认), right 向右, top 向上, bottom 向下
					},
					crossCallBack: function(e){ 
						if(settings.closeCallBack) settings.closeCallBack(e);
					}
				})
			}
		})
	},



	//========================================
	/**
	 * 网页水印，即利用canvas给网页添加水印
	 * @param {object} 参数
	 */
	waterMarker: function(options){
		var defaults = {
			element: ["body"], // 要添加水印的元素节点组成数组(可选)，默认["body"]。eg. ['body', '.user', '#date']
			word: "水印", // 水印文字(可选), 默认'水印'两字。
			width: 250, // 画布的宽(可选), 默认250。
			height: 250, // 画布的高(可选), 默认250。
			rotate: -30, // 旋转角度(可选), 默认-30度。
			font: "16px Helvetica Neue", // 文字字体(可选), 默认 '16px Helvetica Neue'。
			fillStyle: "rgba(17, 17, 17, .5)", // 文字颜色(可选), 默认 'rgba(17, 17, 17, .5)'
			textAlign: "left", // 文字水平位置(可选), 默认 left。值: left 左, center 中, right 右, start 开始, end 结束。
			textBaseline: "middle", // 文字垂直位置(可选), 默认 middle。 值: middle 中, top 顶端, bottom 底端, hanging 悬挂基线, alphabetic 字母基线, ideographic 表意基线。
		}
		var settings = $.extend(true, {}, defaults, options || {});
		var elemArr = settings.element,
			word = settings.word,
			width = settings.width,
			height = settings.height,
			degree = settings.rotate,
			font = settings.font,
			fillStyle = settings.fillStyle,
			textAlign = settings.textAlign,
			textBaseline = settings.textBaseline;
		// 创建canvas
		var can = document.createElement('canvas');
		document.body.appendChild(can);
		can.width = width;  // 画布的宽
		can.height = height; // 画布的高
		can.style.display = 'none';
		// 设置水印
		var cans = can.getContext('2d');
		cans.rotate(degree * Math.PI / 180);
		cans.font = font;
		cans.fillStyle = fillStyle;
		cans.textAlign = textAlign;
		cans.textBaseline = textBaseline;
		cans.fillText(word, can.width / 3, can.height / 2); // 文字间距比例
		// 将画布插入指定节点中
		// 一般是插入body中即可，但如果body的子节点有自定义背景色，则应该分别插入到这些子元素中，而不是body
		for(var i = 0; i < elemArr.length; i++){
			var ele = elemArr[i];
			var dom = null;
			if(ele.indexOf('#') >= 0) dom = document.getElementById(ele.toString().replace(/([\.\#])/g, ''));
			else if(ele.indexOf('.') >= 0) dom = document.getElementsByClassName(ele.toString().replace(/([\.\#])/g, ''))[0];
			else if(ele === 'body') dom = document.body;
			else dom = null;
			if(dom != null){
				dom.style.backgroundImage = "url(" + can.toDataURL("image/png") + ")"; // 把画布插入到指定DOM元素中, 
			}
		}
	},



	//========================================
	/**
	 * 房贷计算器分期付款、分期金额
	 * @param {object} options 参数对象
	 */
	installmentPayment: function(options){
		if(typeof format == 'undefined' || typeof convert == 'undefined'){
			this.alertDialog('请先引入函数库文件<br>neatui-functions.js');
			return;
		}
		var defaults = {
			payment: "等额本息", // 还款方式(可选)。值：本额本息(默认), 等额本金
			month: 240, // 贷款期数(可选), 单位：期(或月)。默认240(即20年)。比如：15年就是15*12=180期, 20年就是20*12=240期, 30年就是30*12=360期
			total: 900000, // 贷款总额(可选), 单位：元。默认900000(即90万元)
			rate: 4.9, // 贷款年利率(可选), 单位：%。默认4.9%
			// 组合贷时，下面填写公积金贷款金额与年利率
			total2: 0, // 贷款总额(可选), 单位：元。默认0
			rate2: 0, // 公积金贷款年利率(可选), 单位：%。默认0%
			//
			digit: 2, // 保留小数位数(可选), 默认2
			caption: "" // 窗口标题(可选), 默认空(系统会自动添加成“按揭贷款分期金额”)
		}
		var settings = $.extend(true, {}, defaults, options || {});
		var payment = settings.payment != '等额本息' && settings.payment != '等额本金' ? '等额本息' : settings.payment,
			month = parseFloat(settings.month),
			amount1 = parseFloat(settings.total.toString().replace(/,/g, '')),
			rate1 = parseFloat(settings.rate.toString().replace(/\%/g, '')) / 1200, // 转成月利率
			amount2 = parseFloat(settings.total2.toString().replace(/,/g, '')),
			rate2 = parseFloat(settings.rate2.toString().replace(/\%/g, '')) / 1200, // 转成月利率
			digit = parseInt(settings.digit),
			caption = settings.caption.toString().replace(/([ ]+)/g, '') === '' ? '按揭贷款分期金额' : settings.caption;
		if(isNaN(amount1)) amount1 = 0;
		if(isNaN(amount2)) amount2 = 0;
		if(isNaN(rate1)) rate1 = 0;
		if(isNaN(rate2)) rate2 = 0;
		// 规范参数值
		var regNumber = /^\-?[0-9]+\.?[0-9]+$/; // 数值类型校验
		if(!regNumber.test(month.toString())) month = 0;
		if(!regNumber.test(amount1.toString())) amount1 = 0;
		if(!regNumber.test(rate1.toString())) rate1 = 0;
		if(!regNumber.test(digit.toString())) digit = 2;
		// console.log('payment：', payment, '\nmonth：', month, '\namount：', amount, '\nrate：', rate, '\ndigit：', digit);
		// 计算并拼接HTML
		var html = '<div class="payments">';
		if(amount1 == 0){
			html += '<div class="payments__nodata">对不起，无法计算分期数据，请先维护贷款金额。</div>';
		}
		else if(month == 0){
			html += '<div class="payments__nodata">对不起，无法计算分期数据，请先维护贷款年限。</div>';
		}else if(rate1 == 0){
			html += '<div class="payments__nodata">对不起，无法计算分期数据，请先维护贷款利率。</div>';
		}else{
			var subTitle = '';
			if(amount2 != 0 && amount2 != ''){ // 组合贷时
				subTitle = payment + '，按揭' + month + '期。商业贷' + fnYuan2WanYuan(amount1, 'round', 0) + '万元，年利率' + settings.rate + '%；公积金贷' + fnYuan2WanYuan(amount2, 'round', 0) + '万元，年利率' + settings.rate2 + '%';
			}else{ // 商业贷、公积金贷时
				subTitle = payment + '，按揭' + month + '期。贷款总额' + fnYuan2WanYuan(amount1, 'round', 0) + '万元，年利率' + settings.rate + '%';
			}
			html += '<div class="payments__subtitle">(' + subTitle + ')</div>';
			html += '<div class="payments__content">';
			// 等额本息
			if(payment == '等额本息'){
				var payEveryMonth1 = ( amount1 * rate1 * Math.pow(1 + rate1, month) ) / ( Math.pow(1 + rate1, month) - 1 ); // 每月还款金额
				if(isNaN(payEveryMonth1)) payEveryMonth1 = 0;
				var payEveryMonth2 = ( amount2 * rate2 * Math.pow(1 + rate2, month) ) / ( Math.pow(1 + rate2, month) - 1 ); // 每月还款金额
				if(isNaN(payEveryMonth2)) payEveryMonth2 = 0;
				for(var i = 1; i <= month; i++){
					var principal1 = ( ( payEveryMonth1 - amount1 * rate1) * Math.pow(1 + rate1, i - 1) ), // 每月应还本金
						interest1 = ( ( amount1 * rate1 - payEveryMonth1 ) * Math.pow(1 + rate1, i - 1) ) + payEveryMonth1; // 每月应还利息
					var principal2 = ( ( payEveryMonth2 - amount2 * rate2) * Math.pow(1 + rate2, i - 1) ), // 每月应还本金
						interest2 = ( ( amount2 * rate2 - payEveryMonth2 ) * Math.pow(1 + rate2, i - 1) ) + payEveryMonth2; // 每月应还利息
					// 转换
					var payEveryMonth = format.thousandth((parseFloat(payEveryMonth1) + parseFloat(payEveryMonth2)).toFixed(digit)),
						principal = format.thousandth((parseFloat(principal1) + parseFloat(principal2)).toFixed(digit)),
						interest = format.thousandth((parseFloat(interest1) + parseFloat(interest2)).toFixed(digit));
					// 拼接
					html += [
						'<div class="stages flex align-center">',
							'<div class="stages__term">第' + i + '期</div>',
							'<div class="stages__money">',
								'<div class="stages__top">',
									'<div class="stages__monthly">&yen;' + payEveryMonth + '</div>',
								'</div>',
								'<div class="stages__con">',
									'<div class="stages__principal">含本金' +  principal + '</div>',
									'<div class="stages__interest">利息' + interest + '</div>',
								'</div>',
							'</div>',
						'</div>'
					].join('\r\n')             
				}
			}
			// 等额本金
			if(payment == '等额本金'){
				for(var i = 1; i <= month; i++){
					var payEveryMonth1 = ( amount1 * ( 1 + (month - i + 1) * rate1) ) / month, // 第N个月(n>=2)还款金额
						principal1 = amount1 / month, // 每月应还本金
						interest1 = ( (month - i + 1) * amount1 * rate1 ) / month;  // 每月应还利息
					var payEveryMonth2 = ( amount2 * ( 1 + (month - i + 1) * rate2) ) / month, // 第N个月(n>=2)还款金额
						principal2 = amount2 / month, // 每月应还本金
						interest2 = ( (month - i + 1) * amount2 * rate2 ) / month;  // 每月应还利息
					// 转换
					var payEveryMonth = format.thousandth((parseFloat(payEveryMonth1) + parseFloat(payEveryMonth2)).toFixed(digit)),
						principal = format.thousandth((parseFloat(principal1) + parseFloat(principal2)).toFixed(digit)),
						interest = format.thousandth((parseFloat(interest1) + parseFloat(interest2)).toFixed(digit));
					// 拼接	
					html += [
						'<div class="stages flex align-center">',
							'<div class="stages__term">第' + i + '期</div>',
							'<div class="stages__money">',
								'<div class="stages__top">',
									'<div class="stages__monthly">&yen;' + payEveryMonth + '</div>',
								'</div>',
								'<div class="stages__con">',
									'<div class="stages__principal">含本金' +  principal + '</div>',
									'<div class="stages__interest">利息' + interest + '</div>',
								'</div>',
							'</div>',
						'</div>'
					].join('\r\n')             
				}
			}
			html +='</div><!--/.payments__content-->';
		}
		html += '</div><!--/.payments-->';

		// 打开窗口
		this.openAside({
			caption: caption,
			content: html,
			showButton: false
		})


		/**
		* 将“元”转化成“万元”
		* @param {string} ps_str “元”字符串
		* @param {string} ps_method 取值方式(可缺省). round 四舍五入(默认), floor 向下取整, ceil 向下取整
		* @param {number} ps_digit 小数位数(可缺省).(仅当ps_method='round'时有效), 默认-1，即不处理原样返回.eg.10546 <=> 10546）
		* @param {boolean} ps_isEmptyTips 空值时是否返回一个默认字符串(可缺省).默认false
		* @returns {string} 返回万元的数值
		*/
	   function fnYuan2WanYuan(ps_str, ps_method, ps_digit, ps_isEmptyTips){
		   var method = typeof ps_method == 'undefined' ? 'round' : ps_method;
		   var digit = typeof ps_digit == 'undefined' ? -1 : parseInt(ps_digit);
		   var isEmptyTips = typeof ps_isEmptyTips == 'undefined' ? false : ps_isEmptyTips == true ? true : false;
		   var wanYuan = '';
		   if($.trim(ps_str) != ''){
				   //wanYuan = ps_str / 10000;
				   wanYuan = ps_str * 1000000 / 10000000000; //解决小数乘法bug
			   if(method == 'round'){
				   if(digit >= 0) wanYuan = wanYuan.toFixed(digit);
			   }
			   if(method == 'floor') wanYuan = Math.floor(wanYuan);
			   if(method == 'ceil') wanYuan = Math.ceil(wanYuan);
		   }else{
			   if(ps_isEmptyTips) wanYuan = "";
		   }
		   if(isNaN(wanYuan)) wanYuan = '';
		   return wanYuan;
	   }

	   
	}
	
	
};